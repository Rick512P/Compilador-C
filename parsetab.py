
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ATR BOOLEAN CASE CHAR COMENTARIO DEFINE DELIMITADOR DO ELSE FOR ID IF LBRACKET LCHAVE LIBIMPORT LPAREN NUMERO OPA OPL RBRACKET RCHAVE RPAREN STRING SWITCH TIPO WHILEprograma : lista_declaracoeslista_declaracoes : lista_declaracoes declaracao\n                          | declaracaodeclaracao : declaracao_variaveis\n                  | declaracao_funcao\n                  | declaracao_preprocessador\n                  | atribuicaodeclaracao_variaveis : tipo lista_variaveis ';'declaracao_funcao : tipo ID '(' parametros ')' blocodeclaracao_preprocessador : LIBIMPORT ID OPL ID DELIMITADOR ID OPL\n                                  | DEFINE ID NUMEROtipo : TIPOlista_variaveis : lista_variaveis ',' ID\n                        | IDparametros : lista_parametros\n                   | vaziolista_parametros : lista_parametros ',' tipo ID\n                         | tipo IDbloco : '{' lista_comandos '}'lista_comandos : lista_comandos comando\n                      | comandocomando : atribuicao\n               | comando_condicional\n               | comando_loop\n               | blocoatribuicao : ID ATR expressao DELIMITADORcomando_condicional : IF '(' expressao ')' blococomando_loop : FOR '(' atribuicao expressao ';' atribuicao ')' bloco\n                    | WHILE '(' expressao ')' blocoexpressao : expressao OPL expressao\n                 | expressao OPA expressao\n                 | ID\n                 | NUMERO\n                 | '(' expressao ')'vazio : "
    
_lr_action_items = {'LIBIMPORT':([0,2,3,4,5,6,7,13,19,27,33,45,59,60,],[10,10,-3,-4,-5,-6,-7,-2,-8,-11,-26,-9,-10,-19,]),'DEFINE':([0,2,3,4,5,6,7,13,19,27,33,45,59,60,],[11,11,-3,-4,-5,-6,-7,-2,-8,-11,-26,-9,-10,-19,]),'ID':([0,2,3,4,5,6,7,8,10,11,12,13,16,19,20,25,26,27,29,33,34,35,44,45,46,47,49,50,51,52,53,54,59,60,61,62,63,64,66,71,72,73,76,],[9,9,-3,-4,-5,-6,-7,15,17,18,-12,-2,22,-8,28,22,37,-11,38,-26,22,22,48,-9,9,58,9,-21,-22,-23,-24,-25,-10,-19,-20,22,9,22,22,-27,9,-29,-28,]),'TIPO':([0,2,3,4,5,6,7,13,19,21,27,33,40,45,59,60,],[12,12,-3,-4,-5,-6,-7,-2,-8,12,-11,-26,12,-9,-10,-19,]),'$end':([1,2,3,4,5,6,7,13,19,27,33,45,59,60,],[0,-1,-3,-4,-5,-6,-7,-2,-8,-11,-26,-9,-10,-19,]),'ATR':([9,],[16,]),';':([14,15,22,24,28,41,42,43,69,],[19,-14,-32,-33,-13,-30,-31,-34,72,]),',':([14,15,28,31,38,58,],[20,-14,-13,40,-18,-17,]),'(':([15,16,25,33,34,35,55,56,57,62,64,66,],[21,25,25,-26,25,25,62,63,64,25,25,25,]),'NUMERO':([16,18,25,33,34,35,62,64,66,],[24,27,24,-26,24,24,24,24,24,]),'OPL':([17,22,23,24,36,41,42,43,48,65,67,69,],[26,-32,34,-33,34,34,34,-34,59,34,34,34,]),')':([21,22,24,30,31,32,33,36,38,41,42,43,58,65,67,74,],[-35,-32,-33,39,-15,-16,-26,43,-18,-30,-31,-34,-17,68,70,75,]),'DELIMITADOR':([22,23,24,37,41,42,43,],[-32,33,-33,44,-30,-31,-34,]),'OPA':([22,23,24,36,41,42,43,65,67,69,],[-32,35,-33,35,35,35,-34,35,35,35,]),'}':([33,49,50,51,52,53,54,60,61,71,73,76,],[-26,60,-21,-22,-23,-24,-25,-19,-20,-27,-29,-28,]),'IF':([33,46,49,50,51,52,53,54,60,61,71,73,76,],[-26,55,55,-21,-22,-23,-24,-25,-19,-20,-27,-29,-28,]),'FOR':([33,46,49,50,51,52,53,54,60,61,71,73,76,],[-26,56,56,-21,-22,-23,-24,-25,-19,-20,-27,-29,-28,]),'WHILE':([33,46,49,50,51,52,53,54,60,61,71,73,76,],[-26,57,57,-21,-22,-23,-24,-25,-19,-20,-27,-29,-28,]),'{':([33,39,46,49,50,51,52,53,54,60,61,68,70,71,73,75,76,],[-26,46,46,46,-21,-22,-23,-24,-25,-19,-20,46,46,-27,-29,46,-28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'lista_declaracoes':([0,],[2,]),'declaracao':([0,2,],[3,13,]),'declaracao_variaveis':([0,2,],[4,4,]),'declaracao_funcao':([0,2,],[5,5,]),'declaracao_preprocessador':([0,2,],[6,6,]),'atribuicao':([0,2,46,49,63,72,],[7,7,51,51,66,74,]),'tipo':([0,2,21,40,],[8,8,29,47,]),'lista_variaveis':([8,],[14,]),'expressao':([16,25,34,35,62,64,66,],[23,36,41,42,65,67,69,]),'parametros':([21,],[30,]),'lista_parametros':([21,],[31,]),'vazio':([21,],[32,]),'bloco':([39,46,49,68,70,75,],[45,54,54,71,73,76,]),'lista_comandos':([46,],[49,]),'comando':([46,49,],[50,61,]),'comando_condicional':([46,49,],[52,52,]),'comando_loop':([46,49,],[53,53,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> lista_declaracoes','programa',1,'p_programa','parser_copy.py',10),
  ('lista_declaracoes -> lista_declaracoes declaracao','lista_declaracoes',2,'p_lista_declaracoes','parser_copy.py',15),
  ('lista_declaracoes -> declaracao','lista_declaracoes',1,'p_lista_declaracoes','parser_copy.py',16),
  ('declaracao -> declaracao_variaveis','declaracao',1,'p_declaracao','parser_copy.py',24),
  ('declaracao -> declaracao_funcao','declaracao',1,'p_declaracao','parser_copy.py',25),
  ('declaracao -> declaracao_preprocessador','declaracao',1,'p_declaracao','parser_copy.py',26),
  ('declaracao -> atribuicao','declaracao',1,'p_declaracao','parser_copy.py',27),
  ('declaracao_variaveis -> tipo lista_variaveis ;','declaracao_variaveis',3,'p_declaracao_variaveis','parser_copy.py',32),
  ('declaracao_funcao -> tipo ID ( parametros ) bloco','declaracao_funcao',6,'p_declaracao_funcao','parser_copy.py',37),
  ('declaracao_preprocessador -> LIBIMPORT ID OPL ID DELIMITADOR ID OPL','declaracao_preprocessador',7,'p_declaracao_preprocessador','parser_copy.py',42),
  ('declaracao_preprocessador -> DEFINE ID NUMERO','declaracao_preprocessador',3,'p_declaracao_preprocessador','parser_copy.py',43),
  ('tipo -> TIPO','tipo',1,'p_tipo','parser_copy.py',51),
  ('lista_variaveis -> lista_variaveis , ID','lista_variaveis',3,'p_lista_variaveis','parser_copy.py',56),
  ('lista_variaveis -> ID','lista_variaveis',1,'p_lista_variaveis','parser_copy.py',57),
  ('parametros -> lista_parametros','parametros',1,'p_parametros','parser_copy.py',67),
  ('parametros -> vazio','parametros',1,'p_parametros','parser_copy.py',68),
  ('lista_parametros -> lista_parametros , tipo ID','lista_parametros',4,'p_lista_parametros','parser_copy.py',72),
  ('lista_parametros -> tipo ID','lista_parametros',2,'p_lista_parametros','parser_copy.py',73),
  ('bloco -> { lista_comandos }','bloco',3,'p_bloco','parser_copy.py',81),
  ('lista_comandos -> lista_comandos comando','lista_comandos',2,'p_lista_comandos','parser_copy.py',89),
  ('lista_comandos -> comando','lista_comandos',1,'p_lista_comandos','parser_copy.py',90),
  ('comando -> atribuicao','comando',1,'p_comando','parser_copy.py',98),
  ('comando -> comando_condicional','comando',1,'p_comando','parser_copy.py',99),
  ('comando -> comando_loop','comando',1,'p_comando','parser_copy.py',100),
  ('comando -> bloco','comando',1,'p_comando','parser_copy.py',101),
  ('atribuicao -> ID ATR expressao DELIMITADOR','atribuicao',4,'p_atribuicao','parser_copy.py',106),
  ('comando_condicional -> IF ( expressao ) bloco','comando_condicional',5,'p_comando_condicional','parser_copy.py',111),
  ('comando_loop -> FOR ( atribuicao expressao ; atribuicao ) bloco','comando_loop',8,'p_comando_loop','parser_copy.py',119),
  ('comando_loop -> WHILE ( expressao ) bloco','comando_loop',5,'p_comando_loop','parser_copy.py',120),
  ('expressao -> expressao OPL expressao','expressao',3,'p_expressao','parser_copy.py',130),
  ('expressao -> expressao OPA expressao','expressao',3,'p_expressao','parser_copy.py',131),
  ('expressao -> ID','expressao',1,'p_expressao','parser_copy.py',132),
  ('expressao -> NUMERO','expressao',1,'p_expressao','parser_copy.py',133),
  ('expressao -> ( expressao )','expressao',3,'p_expressao','parser_copy.py',134),
  ('vazio -> <empty>','vazio',0,'p_vazio','parser_copy.py',144),
]
